name: Build Docker Image

on:
  # You can manually run this workflow.
  workflow_dispatch:
  # This workflow will run on every push to the main branch.
  push:
    branches:
      - main

jobs:

# ---------------------------------------------------------------------------------------

  build:

# ---------------------------------------------------------------------------------------

    name: "Build Docker Image"
    # https://github.com/actions/runner-images
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        config:
        - { debian_codename: "bookworm", debian_version: "12", php_version: "8.1.4" }

    env:
      GHCR_IMAGE: ghcr.io/${{ github.repository }}

    steps:
      - name: ✂️ Free Disk Space
        uses: jlumbroso/free-disk-space@v1.3.1 # https://github.com/jlumbroso/free-disk-space
        with:
          tool-cache: true
          docker-images: false

      - name: 🤘 Checkout Code
        uses: actions/checkout@v4 # https://github.com/actions/checkout

      - name: Set TERM for shtool
        run: echo "TERM=xterm-256color" >> $GITHUB_ENV

      - name: 🔍 Run hadolint
        uses: hadolint/hadolint-action@v3.1.0 # https://github.com/hadolint/hadolint-action
        with:
          dockerfile: .devcontainer/debian/${{ matrix.config.debian_codename }}/Dockerfile
          no-fail: true

      - name: 🔒 Login to Github Container Registry (GHCR)
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3 # https://github.com/docker/login-action
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔽 Setup QEMU
        uses: docker/setup-qemu-action@v3 # https://github.com/docker/setup-qemu-action
        with:
          platforms: ${{ matrix.config.platform }}

      - name: 🔽 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3 # https://github.com/docker/setup-buildx-action

      # generate metadata for the build-stage image
      - name: ✏ Setup Docker Metadata
        id: metadata-build-stage
        uses: docker/metadata-action@v5 # https://github.com/docker/metadata-action
        with:
          images: |
            ${{ env.GHCR_IMAGE }}
          flavor: |
            latest=auto
            prefix=${{ matrix.config.debian_codename }}-
          tags: |
            type=schedule,pattern={{ date 'YYYYMMDD' }}
            type=semver,pattern={{ version }}
            type=semver,pattern={{ major }}.{{ minor }}
            type=raw,value={{ date 'YYYYMMDD' }}-sha-{{ sha }},enabled=${{ github.event_name == 'push' }}
            type=raw,value=latest

      # generate metadata for the deploy image
      - name: ✏ Setup Docker Metadata
        id: metadata-deploy-stage
        uses: docker/metadata-action@v5 # https://github.com/docker/metadata-action
        with:
          images: |
            ${{ env.GHCR_IMAGE }}
          flavor: |
            latest=auto
            prefix=${{ matrix.config.debian_codename }}-deploy-
          tags: |
            type=schedule,pattern={{ date 'YYYYMMDD' }}
            type=semver,pattern={{ version }}
            type=semver,pattern={{ major }}.{{ minor }}
            type=raw,value={{ date 'YYYYMMDD' }}-sha-{{ sha }},enabled=${{ github.event_name == 'push' }}
            type=raw,value=latest

      - name: 🙏 Build Docker image
        uses: docker/build-push-action@v6 # https://github.com/docker/build-push-action
        with:
          context: .
          file: .devcontainer/debian/${{ matrix.config.debian_codename }}/Dockerfile
          target: build-stage
          platforms: linux/amd64
          tags: ${{ steps.metadata-build-stage.outputs.tags }}
          labels: ${{ steps.metadata-build-stage.outputs.labels }}
          push: false
          load: true

      - name: 🙏 Build Docker image
        uses: docker/build-push-action@v6 # https://github.com/docker/build-push-action
        with:
          context: .
          file: .devcontainer/debian/${{ matrix.config.debian_codename }}/Dockerfile
          target: deploy-stage
          platforms: linux/amd64
          tags: ${{ steps.metadata-deploy-stage.outputs.tags }}
          labels: ${{ steps.metadata-deploy-stage.outputs.labels }}
          push: false
          load: true

      - name: ❔List Docker Images
        run: |
          docker images --format "table {{.ID}}\t{{.Repository}}\t{{.Tag}}\t{{.Size}}"
          docker images --digests

      - name: 🐳 🚀 Push all images and all tags
        run: |
          docker push --all-tags ${{ env.GHCR_IMAGE }}

      - name: 🔄 Copy build artifacts from the "deploy-stage" Docker image
        run: |
          container_id=$(docker create ${{ env.GHCR_IMAGE }}:${{ matrix.config.debian_codename }}-deploy-latest)
          docker cp $container_id:/php-wasm-build ./php-wasm
          docker rm $container_id

      - name: 🏷️ Versionize Artifact
        run: |
          echo "PHP_WASM_ARTIFACT_NAME=php-wasm-${{ matrix.config.php_version }}" >> ./build/.env
          echo "PHP_WASM_ARTIFACT_ZIPFILE=php-wasm-${{ matrix.config.php_version }}.zip" >> ./build/.env

      - name: 📦 Package Artifact
        run: |
          7z a -tzip -mx9 "${{ env.PHP_WASM_ARTIFACT_ZIPFILE }}" "/php-wasm"

      - name: 📦 🚀 Upload Artifact
        uses: actions/upload-artifact@v4 # https://github.com/actions/upload-artifact
        with:
          name: ${{ env.PHP_WASM_ARTIFACT_NAME }}
          path: ${{ env.PHP_WASM_ARTIFACT_ZIPFILE}}
